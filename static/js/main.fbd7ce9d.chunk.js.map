{"version":3,"sources":["component/Winners.js","component/Matrix.js","App.js","index.js"],"names":["Winners","win","useState","winners","setWinners","useEffect","fetch","then","res","json","className","map","winner","date","id","Matrix","matrix","handleClickCell","myStyle","row","i","col","j","style","onClick","App","gameModes","setGameModes","selectedMode","setSelectedMode","playerName","setPlayerName","selectedData","setSelectedData","setMatrix","gameCurrentState","setGameCurrentState","maxCount","setMaxCount","greenCount","setGreenCount","redCount","setRedCount","setWin","intervalId","setIntervalId","width","height","random_i","random_j","interval","setInterval","console","log","count","Math","floor","random","generateDate","Date","hours","getHours","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear","finishGame","winnerName","clearInterval","sendData","axios","post","catch","err","error","Container","fluid","Row","Col","lg","md","onSubmit","event","preventDefault","trim","Array","fill","display","value","onChange","target","ceil","pow","Object","entries","gameMode","idx","type","placeholder","disabled","e","getAttribute","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbd7ce9d.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\nconst Winners = ({win}) => {\r\n    const winnersUrl = \"https://starnavi-frontend-test-task.herokuapp.com/winners\";\r\n    const [winners, setWinners] = useState([]);\r\n\r\n    //get winners data\r\n    useEffect(() => {\r\n        fetch(winnersUrl)\r\n            .then(res => res.json())\r\n            .then(res => setWinners(res))\r\n    }, [winners, win])\r\n\r\n    return (\r\n        <table className=\"App__Game_right_table\">\r\n            <thead>\r\n            <tr>\r\n                <th>User Name</th>\r\n                <th>Time and Date</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {winners && winners.map(winner => (\r\n                <tr key={winner.id}>\r\n                    <td>{winner.winner}</td>\r\n                    <td>{winner.date}</td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n    )\r\n};\r\n\r\nexport default Winners","import React from \"react\";\r\n\r\nconst Matrix = ({matrix, handleClickCell, myStyle}) => {\r\n    return (\r\n        <div className=\"App__Game_left_table\">\r\n            {\r\n                matrix &&\r\n                matrix.map((row, i) => (\r\n                        <div key={i}>\r\n                            {row.map((col, j) => (\r\n                                <p style={myStyle}\r\n                                   key={`${i}-${j}`}\r\n                                   onClick={handleClickCell}\r\n                                   className={`color-${(matrix[i][j])}`}\r\n                                   data-i={i}\r\n                                   data-j={j}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Matrix","import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport {Container, Row, Col} from 'reactstrap';\nimport Winners from \"./component/Winners\";\nimport Matrix from \"./component/Matrix\";\nimport axios from \"axios\";\n\nfunction App() {\n    const url = \"https://starnavi-frontend-test-task.herokuapp.com/game-settings\";\n\n    const [gameModes, setGameModes] = useState({});\n    const [selectedMode, setSelectedMode] = useState(\"\")\n    const [playerName, setPlayerName] = useState(\"\")\n    const [selectedData, setSelectedData] = useState({})\n    const [matrix, setMatrix] = useState([])\n    const [gameCurrentState, setGameCurrentState] = useState(\"start\")\n    const [maxCount, setMaxCount] = useState(13)\n    const [greenCount, setGreenCount] = useState(0)\n    const [redCount, setRedCount] = useState(0)\n    const [win, setWin] = useState(\"\")\n    const [intervalId, setIntervalId] = useState(0)\n\n    const myStyle = {\n        width: (selectedData[\"field\"] === 5 ? selectedData[\"field\"] : selectedData[\"field\"] === 10 ? \"3.5\" : 2.33) + \"rem\",\n        height: (selectedData[\"field\"] === 5 ? selectedData[\"field\"] : selectedData[\"field\"] === 10 ? \"3.5\" : 2.33) + \"rem\"\n    }\n    //get mode type\n    useEffect(() => {\n        fetch(url)\n            .then(res => res.json())\n            .then(res => setGameModes(res))\n    }, [])\n\n    const handleChangeMode = (event) => {\n        setSelectedMode(event.target.value);\n        setMaxCount(Math.ceil(Math.pow(gameModes[event.target.value][\"field\"], 2) / 2));\n    }\n\n    const handleChangePlayerName = (event) => {\n        setPlayerName(event.target.value.trim())\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (playerName.trim() === \"\") {\n            setPlayerName(\"User\")\n        }\n        setSelectedData(gameModes[selectedMode]);\n        setMatrix(Array(gameModes[selectedMode][\"field\"]).fill(0).map(row => new Array(gameModes[selectedMode][\"field\"]).fill(0)));\n        setGameCurrentState(\"current\");\n        setRedCount(0);\n        setGreenCount(0);\n    }\n\n    useEffect(() => {\n        let random_i = -1, random_j = -1;\n        if (gameCurrentState === \"current\") {\n            const interval =\n                setInterval(() => {\n                    console.log(random_i, random_j)\n                    if (random_i !== -1 && random_j !== -1) {\n                        if (matrix[random_i][random_j] === 1) {\n                            matrix[random_i][random_j] = 3;\n                            setMatrix([...matrix]);\n                            setRedCount(count => count + 1)\n                        }\n                    }\n                    let i, j;\n                    do {\n                        i = Math.floor(Math.random() * gameModes[selectedMode][\"field\"]);\n                        j = Math.floor(Math.random() * gameModes[selectedMode][\"field\"]);\n                        // console.log(\"matrix \" + i + \"_\" + j, matrix[i][j])\n                    } while (matrix[i][j] !== 0)\n\n                    random_i = i;\n                    random_j = j;\n\n                    matrix[i][j] = 1;\n                    setMatrix([...matrix]);\n\n                }, gameModes[selectedMode][\"delay\"])\n            setIntervalId(interval);\n            setGameCurrentState(\"inProgress\");\n        }\n    }, [gameCurrentState])\n\n    //\"21:29; 23 September 2021\" in this format generate date property\n    const generateDate = () => {\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n        ];\n        const date = new Date();\n        const hours = date.getHours();\n        const minutes = date.getMinutes();\n        const day = date.getDate();\n        const month = date.getMonth();\n        const year = date.getFullYear();\n        return `${hours}:${minutes}; ${day} ${months[month]} ${year}`\n    }\n\n    function finishGame(winnerName) {\n        setGameCurrentState(\"finish\");\n        setWin(winnerName);\n        clearInterval(intervalId)\n        let sendData = {winner: winnerName, date: generateDate()};\n        axios.post(\"https://starnavi-frontend-test-task.herokuapp.com/winners\", sendData)\n            .then(res => console.log(\"res = \", res))\n            .catch(err => console.error('There was an error!', err))\n    }\n\n    useEffect(() => {\n        console.log(\"greenCount = \", greenCount, \"redCount = \", redCount, \"playerName = \", playerName);\n        console.log(\"maxCount = \", maxCount, \"gameCurrentState = \", gameCurrentState);\n\n        if (redCount >= maxCount) {\n            finishGame(\"Computer\");\n        } else if (greenCount >= maxCount) {\n            finishGame(playerName);\n        }\n\n    }, [redCount, greenCount])\n\n    const handleClickCell = (e) => {\n        let i = +e.target.getAttribute(\"data-i\")\n        let j = +e.target.getAttribute(\"data-j\")\n        if (matrix[i][j] === 1) {\n            matrix[i][j] = 2;\n            setMatrix([...matrix]);\n            setGreenCount(count => count + 1)\n        }\n        // console.log(e.target, i, j);\n    }\n\n    return (\n        <div className=\"App\">\n            <Container fluid={true}>\n                <Row>\n                    <Col>\n                        <h1 className=\"text-center my-3\">Game In Dots</h1>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg=\"6\" md=\"12\" className=\"App__Game_left\">\n                        <form onSubmit={handleSubmit}\n                              style={{display: gameCurrentState === \"finish\" || gameCurrentState === \"start\" ? \"block\" : \"none\"}}\n                        >\n                            <label>\n                                <select value={selectedMode} onChange={handleChangeMode}\n                                        className=\"App__Game_left_dropdown\">\n                                    <option value=\"\">Pick game mode</option>\n                                    {Object.entries(gameModes).map((gameMode, idx) => (\n                                        <option key={idx} value={gameMode[0]}>\n                                            {gameMode[0] === \"easyMode\" ? \"Easy\" : gameMode[0] === \"normalMode\" ? \"Normal\" : \"Hard\"}\n                                        </option>\n                                    ))}\n                                </select>\n                            </label>\n                            <label>\n                                <input type=\"text\" value={playerName} onChange={handleChangePlayerName}\n                                       className=\"App__Game_left_name\" placeholder=\"Enter your name\"/>\n                            </label>\n                            <input type=\"submit\"\n                                   disabled={!selectedMode}\n                                   className=\"App__Game_left_btn\"\n                                   value={gameCurrentState === \"finish\" ? \"PLAY AGAIN\" : \"PLAY\"}\n                            />\n                        </form>\n\n                        <h3 className=\"text-center my-3\">{gameCurrentState === \"finish\" ? `Winner ${win}` : `Welcome ${playerName}`}</h3>\n                        <Matrix matrix={matrix} handleClickCell={handleClickCell} myStyle={myStyle}/>\n                    </Col>\n                    <Col lg=\"6\" md=\"12\" className=\"App__Game_right\">\n                        <h2>Leader Board</h2>\n                        <Winners win={win}/>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}